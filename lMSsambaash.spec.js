// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('LMS sambaash', function() {
  this.timeout(30000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
  })
  afterEach(async function() {
    await driver.quit();
  })
  async function waitForWindow(timeout = 2) {
    await driver.sleep(timeout)
    const handlesThen = vars["windowHandles"]
    const handlesNow = await driver.getAllWindowHandles()
    if (handlesNow.length > handlesThen.length) {
      return handlesNow.find(handle => (!handlesThen.includes(handle)))
    }
    throw new Error("New window did not appear before timeout")
  }
  it('LMS sambaash', async function() {
    // Test name: LMS sambaash
    // Step # | name | target | value
    // 1 | open | /login?next=/dashboard | 
    await driver.get("https://lms.sambaash.com/login?next=/dashboard")
    // 2 | setWindowSize | 1382x744 | 
    await driver.manage().window().setRect({ width: 1382, height: 744 })
    // 3 | verifyElementPresent | css=.logo | 
    {
      const elements = await driver.findElements(By.css(".logo"))
      assert(elements.length)
    }
    // 4 | verifyElementPresent | css=.button-oa2-google-oauth2 > span:nth-child(2) | 
    {
      const elements = await driver.findElements(By.css(".button-oa2-google-oauth2 > span:nth-child(2)"))
      assert(elements.length)
    }
    // 5 | click | css=.button-oa2-google-oauth2 > span:nth-child(2) | 
    await driver.findElement(By.css(".button-oa2-google-oauth2 > span:nth-child(2)")).click()
    // 6 | verifyElementPresent | css=.logo | 
    {
      const elements = await driver.findElements(By.css(".logo"))
      assert(elements.length)
    }
    // 7 | click | css=.global-header | 
    await driver.findElement(By.css(".global-header")).click()
    // 8 | click | css=.logo | 
    await driver.findElement(By.css(".logo")).click()
    // 9 | verifyElementPresent | linkText=Courses | 
    {
      const elements = await driver.findElements(By.linkText("Courses"))
      assert(elements.length)
    }
    // 10 | click | linkText=Courses | 
    await driver.findElement(By.linkText("Courses")).click()
    // 11 | verifyElementPresent | linkText=Help | 
    {
      const elements = await driver.findElements(By.linkText("Help"))
      assert(elements.length)
    }
    // 12 | click | linkText=Help | 
    vars["windowHandles"] = await driver.getAllWindowHandles()
    // 13 | storeWindowHandle | root | 
    await driver.findElement(By.linkText("Help")).click()
    // 14 | selectWindow | handle=${win377} | 
    vars["win377"] = await waitForWindow(2000)
    // 15 | close |  | 
    vars["root"] = await driver.getWindowHandle()
    // 16 | selectWindow | handle=${root} | 
    await driver.switchTo().window(vars["win377"])
    // 17 | click | css=.fa-caret-down | 
    await driver.close()
    // 18 | verifyElementPresent | css=.user-image-frame | 
    await driver.switchTo().window(vars["root"])
    // 19 | click | css=.fa-caret-down | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 20 | click | css=.fa-caret-down | 
    {
      const elements = await driver.findElements(By.css(".user-image-frame"))
      assert(elements.length)
    }
    // 21 | verifyElementPresent | linkText=Resume your last course | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 22 | verifyElementPresent | linkText=Dashboard | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 23 | verifyElementPresent | linkText=My Journal | 
    {
      const elements = await driver.findElements(By.linkText("Resume your last course"))
      assert(elements.length)
    }
    // 24 | verifyElementPresent | linkText=Profile | 
    {
      const elements = await driver.findElements(By.linkText("Dashboard"))
      assert(elements.length)
    }
    // 25 | verifyElementPresent | linkText=Account | 
    {
      const elements = await driver.findElements(By.linkText("My Journal"))
      assert(elements.length)
    }
    // 26 | verifyElementPresent | linkText=Sign Out | 
    {
      const elements = await driver.findElements(By.linkText("Profile"))
      assert(elements.length)
    }
    // 27 | click | css=.fa-caret-down | 
    {
      const elements = await driver.findElements(By.linkText("Account"))
      assert(elements.length)
    }
    // 28 | click | css=.fa-caret-down | 
    {
      const elements = await driver.findElements(By.linkText("Sign Out"))
      assert(elements.length)
    }
    // 29 | click | linkText=Dashboard | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 30 | click | css=.fa-caret-down | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 31 | click | linkText=My Journal | 
    await driver.findElement(By.linkText("Dashboard")).click()
    // 32 | click | css=.fa-caret-down | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 33 | click | linkText=Profile | 
    await driver.findElement(By.linkText("My Journal")).click()
    // 34 | click | css=.fa-caret-down | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 35 | click | linkText=Account | 
    await driver.findElement(By.linkText("Profile")).click()
    // 36 | click | css=.username | 
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 37 | click | css=.toggle-user-dropdown | 
    await driver.findElement(By.linkText("Account")).click()
    // 38 | click | linkText=Profile | 
    await driver.findElement(By.css(".username")).click()
    // 39 | click | css=.fa-caret-down | 
    await driver.findElement(By.css(".toggle-user-dropdown")).click()
    // 40 | mouseDownAt | linkText=Sign Out | 113.375,14
    await driver.findElement(By.linkText("Profile")).click()
    // 41 | mouseMoveAt | linkText=Sign Out | 113.375,14
    await driver.findElement(By.css(".fa-caret-down")).click()
    // 42 | mouseUpAt | linkText=Sign Out | 113.375,14
    {
      const element = await driver.findElement(By.linkText("Sign Out"))
      await driver.actions({ bridge: true }).moveToElement(element).clickAndHold().perform()
    }
    // 43 | click | linkText=Sign Out | 
    {
      const element = await driver.findElement(By.linkText("Sign Out"))
      await driver.actions({ bridge: true }).moveToElement(element).perform()
    }
    {
      const element = await driver.findElement(By.linkText("Sign Out"))
      await driver.actions({ bridge: true }).moveToElement(element).release().perform()
    }
    await driver.findElement(By.linkText("Sign Out")).click()
  })
})
